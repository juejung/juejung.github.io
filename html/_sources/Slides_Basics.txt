A brief introduction to Python
===============================================================================

We use **Python** for a number of reasons:

* It is  open source and therefore free
* It is platform independent, that is, this software runs on Windows or
  Linux PC's as well as Apple computers
* Python has a large user base and is still growing in
  popularity. You will therefore be able to find a lot of material online in
  case you run into trouble and need expert help and/or good sources

Installing Python
-------------------------------------------------------------------------------

Next you have to download Python. If you are running Linux or Apple, some
version of Python is already installed. However, these basic Python versions
miss some of the important scientific packages that you will still have to
install. The most important ones are ``numpy``, ``scipy``, and
``matplotlib``. If you
"google" these packages you should be able to find them on the internet. They
need to be installed.

I also recommend that you install an IDE for Python. One that is very amenable
for scientific computation is called **Spyder**. Spyder is part of most Linux
repositories and can easily be installed from there.

The easiest way to install Python and Spyder and all
sorts of other useful packages for scientific computing is to install Python
via the Anaconda distribution from: https://store.continuum.io/cshop/anaconda/
This is a simple one click installation process which works for
Linux/Windows/Mac and it installs everything!
When prompted whether you want to install Python 2.7 or Python 3.4, go with
3.4.

.. index:: Calculations

Simple calculations
-------------------------------------------------------------------------------

.. index:: Spyder, PythonIDE

After installation, open **Spyder** and try some of the following in the
command line:


.. code-block:: python

    >>> x = 2.4
    >>> y = 3.0
    >>> x + y
    5.4
    >>> print("x= ", x)
    x=  2.4
    >>> print("y= ", y)
    y=  3.0
    >>> print("x + y = ", x + y)
    x + y =  5.4
    
    



Then try the following:

+----------------+---------------+
| Operation      | Expression    |
+================+===============+
| Subtraction:   | ``x - y``     |
+----------------+---------------+
| Division:      | ``x / y``     |
+----------------+---------------+
| Multiplication:| ``x * y``     |
+----------------+---------------+
| Power:         | ``x ** y``    |
+----------------+---------------+
| Square root:   | ``m.sqrt(x)`` |
+----------------+---------------+

Note that the power
function is not ``^`` but ``**``. Also in Python we need to import the Math
module in order to use certain math functions like ``sqrt()`` etc.


.. code-block:: python

    import math as m
    x = 2.455555
    y = 3.12344
    
    print(" --- OUTPUT: --- ")
    print(x + y)
    print(x * y)
    print(x / y)
    print(x ** y)
    print(m.sqrt(x))
    

::

     --- OUTPUT: ---
    5.578995
    7.6697787092
    0.7861700560920011
    16.542802038492464
    1.5670210592075653
    
    



If you want to format your print output and combine text with numbers
you need to use the ``.format`` method of the print function.


.. code-block:: python

    import math as m
    x = 2.455555
    y = 3.12344
    
    print(" --- OUTPUT: --- ")
    print("x+y")
    print("x + y  = {:5.2f}".format(x+y))
    print("x * y  = {:5.2f}".format(x*y))
    print("x / y  = {:5.2f}".format(x/y))
    print("x ** y = {:5.2f}".format(x**y))
    print("sqrt(x)= {:5.2f}".format(m.sqrt(x)))
    

::

     --- OUTPUT: ---
    x+y
    x + y  =  5.58
    x * y  =  7.67
    x / y  =  0.79
    x ** y = 16.54
    sqrt(x)=  1.57
    
    



You can write more complex output with more than one number embedded in a text
as follows:


.. code-block:: python

    x = 2.455555
    y = 3.12344
    
    print(" --- OUTPUT: --- ")
    print("""We want to use variable x = {0:4.2f} \n and divide by
    variable y = {1:4.2f},\n so that we end up with expression
    x/y = {2:4.2f}""".format(x, y, x/y))
    

::

     --- OUTPUT: ---
    We want to use variable x = 2.46
     and divide by
    variable y = 3.12,
     so that we end up with expression
    x/y = 0.79
    
    




.. index:: Scripts, Script files

Script files
-------------------------------------------------------------------------------

Before we go on, let's save all our commands in a so called Script file. These
are basically text files that contain all commands in one big "laundry list"
that we can then execute all at once.  In order to open such a script file in
Spyder simply click on ``File`` :math:`\rightarrow` ``New``. Copy/paste the
above commands into this script file and save it under a name of your choosing.
Note that the file has the extension ``.py`` which indicates that it is a
Python script file.  You can then edit this file at will and add commands etc.
If you want to run or execute the script file simply click the ``Source``
button on top of your editor window. You can also execute the script file line
by line. Simply mark the line, right click, and choose to execute
selection or click on the ``Run`` icon on top of your
editor window.  This is the green button with the "running man
symbol" on top of your editor window. If you'd like to execute just one line,
mark the line and click on the "running man symbol" to the right of the first
green button.

For the remainder of the class I highly recommend that you always use script
files. This will help me to quickly run your code and evaluate your results.

.. index:: Vectors, matrices

Vectors and matrices
-------------------------------------------------------------------------------

A vector is a list of numbers that we can do "math" with. The numbers in the
vector are indexed, so that we can access them.  Note that vector indexing in
Python zero, not with 1. So Python counts the first element in a vector as
element 0, the second as element 1, etc.  In **Python** we first need to import
some important packages so that Python understands basic numerical procedures
and definitions, like vectors and matrices. Also, note the difference in syntax
and the fact that Python starts numbering the elements with 0 and not 1! So if
you want to access the first element in a vector "x" you'd need to type:
"x[0]":

Here are some examples. Vectors ``x`` ``y`` ``year`` and ``names`` are assigned
as follows


.. code-block:: python

    import numpy as np
    
    # You can document your script files using the ``#`` symbol.
    # This allows you to add commentary to your codes.
    
    x = np.array([1,3,4,9])
    y = np.array([9.2, 0.3, 3.2, 2.8])
    #
    # Note that if you like a vector: 2000,2001,2002,2003 you need to
    # write the arange command with the upper limit+1
    #
    year  = np.arange(2000,2004,1)      # np.arange(from, to, stepsize)
    somev = np.linspace(2000,2003,10)   # np.linspace(from, to, nr. of
    steps)
    
    # A list of strings is simply:
    names = ["Tom", "Dick", "Harry", "Patrick"]
    
    print(" --- OUTPUT: --- ")
    print("year= {}".format(year))
    print("x[0]= {}".format(x[0]))
    print("x[1]= {}".format(x[1]))
    print("x[2]= {}".format(x[2]))
    print("names[1]= {}".format(names[1]))
    print("names[3]= {}".format(names[3]))
    

::

     --- OUTPUT: ---
    year= [2000 2001 2002 2003]
    x[0]= 1
    x[1]= 3
    x[2]= 4
    names[1]= Dick
    names[3]= Patrick
    
    



Note, that in **Python** we used the ``print`` command and combined a string
``"a= "`` together with another string ``str(a)`` (**str** translates a number
into a string, i.e., a word) and then prints the combined "word".

Doing math with vectors and matrices
-------------------------------------------------------------------------------

.. index:: array, numpy array, numpy

In **Python** we need to let the interpreter know that we want to work with a
vector and not with a list. The command **np.array** from the **numpy** package
does just that.


.. code-block:: python

    import numpy as np
    # Element-by-element operations
    x1 = np.array([1,3,4,9])
    x2 = np.array([2,5,6,3])
    #
    print(" --- OUTPUT: --- ")
    print("x1= {}".format(x1))
    print("x2= {}".format(x2))
    print(" ---------------- ")
    print("x1+x2= {}".format(x1+x2))
    print("x1*x2= {}".format(x1*x2))
    

::

     --- OUTPUT: ---
    x1= [1 3 4 9]
    x2= [2 5 6 3]
     ----------------
    x1+x2= [ 3  8 10 12]
    x1*x2= [ 2 15 24 27]
    
    



Matrices are "two dimensional" vectors. In **Python** we write


.. code-block:: python

    import numpy as np
    a = np.array([[2,3],[4,5]])
    b = np.array([[2,6],[1,3]])
    #
    print(" --- OUTPUT: --- ")
    print("a= \n {}".format(a))
    print("b= \n {}".format(b))
    print(" ---------------- ")
    print("a*b= \n {}".format(a*b))
    print("a-b= \n {}".format(a-b))
    print(" ---------------- ")
    

::

     --- OUTPUT: ---
    a=
     [[2 3]
     [4 5]]
    b=
     [[2 6]
     [1 3]]
     ----------------
    a*b=
     [[ 4 18]
     [ 4 15]]
    a-b=
     [[ 0 -3]
     [ 3  2]]
     ----------------
    
    



If you want to generate matrices filled with either zeros or ones of a
particular size in **Python** you can use the following:


.. code-block:: python

    import numpy as np
    a = np.zeros((3,5),float)
    b = np.ones((4,3),float)
    c = np.identity(3)
    
    print(" --- OUTPUT: --- ")
    print("a= \n {}".format(a))
    print(" ---------------- ")
    print("b= \n {}".format(b))
    print(" ---------------- ")
    print("c= \n {}".format(c))
    

::

     --- OUTPUT: ---
    a=
     [[ 0.  0.  0.  0.  0.]
     [ 0.  0.  0.  0.  0.]
     [ 0.  0.  0.  0.  0.]]
     ----------------
    b=
     [[ 1.  1.  1.]
     [ 1.  1.  1.]
     [ 1.  1.  1.]
     [ 1.  1.  1.]]
     ----------------
    c=
     [[ 1.  0.  0.]
     [ 0.  1.  0.]
     [ 0.  0.  1.]]
    
    



In class exercises
-------------------------------------------------------------------------------

1. Generate a vector with entries from 1 to 20, stepsize 0.5
2. Divide the first 10 entries by 5
3. Replace the last entry with the value from the first entry
4. Sort the vector from largest to smallest element

Homework
-------------------------------------------------------------------------------

:doc:`./Lecture_Basics/Homework/Homework_Basics`

