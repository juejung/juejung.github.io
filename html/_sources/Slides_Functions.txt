Functions
===========

Use simple user defined functions
-------------------------------------

In Python we can write the following to define a simple function. We start with
two simple function definitions and save them in a file called ``myFunctions.py``


.. code-block:: python

    import numpy as np
    import matplotlib.pyplot as plt
    import math as m
    from scipy import stats as st
    import time            # Imports system time module to time your
    script
    
    plt.close('all')  # close all open figures
    



We next define our own functions and save them as ``myFunctions.py``


.. code-block:: python

    # File 1: myFunctions.py
    def hw1(r1, r2):
        s = m.sin(r1 + r2)
        return s
    
    def hw2(r1, r2):
        s = m.sin(r1 + r2)
        print("Hello, World! sin({0:4.2f}+{1:4.2f}) = {2:4.2f}".format(r1,
    r2, s))
    



In a separate Python script we can now import this previous file containing our
functions with the ``import`` command. We save this new Python script as
``Lecture_Functions\myFunctions.py``


.. code-block:: python

    # File 2: Lecture_Functions\myFunctions.py
    import myFunctions as mfunc
    
    # Now we call these functions with function arguments
    print(mfunc.hw1(2.6, 4.0))
    mfunc.hw2(2.5,5.6)
    

::

    0.31154136351337786
    Hello, World! sin(2.50+5.60) = 0.97
    
    



Advanced Graphing using loops and functions
-----------------------------------------------

Graphing functions with two input arguments z = f(x,y)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


.. code-block:: python

    from mpl_toolkits.mplot3d import Axes3D
    
    X = np.arange(1, 11, 1)
    Y = np.arange(1, 11, 1)
    
    X, Y = np.meshgrid(X, Y)
    xn, yn = X.shape
    
    f = np.zeros((xn,xn),float)   # Define matrix size n x n with zero
    entries
    for i in range(xn):
        for j in range(yn):
            #print(i,j)
            f[i,j] = np.sin(X[i,j]*Y[i,j])
    





.. code-block:: python

    fig = plt.figure(figsize=(14,16))
    ax = Axes3D(fig)
    ax.plot_wireframe(X, Y, f, rstride=2, cstride=2)
    plt.show()
    

.. image:: _static/Slides_Functions_Fig3DPlot_1.*
   :width: 12 cm




Same thing but different function
++++++++++++++++++++++++++++++++++++++++

This time we define the function first :math:`g = f(x, y)=(1 + y * 2) ^ {(-x /
y)} * (1 + y * 1) ^ {(x / y)}` We then span a grid over x and y and evaluate
the function g at each combination of (x,y) using the ``expand.grid`` command.

In **Python** we define the function using the ``def`` command. The grid space
between (x,y) is created using the ``meshgrid`` command. The function ``g`` is
then evaluated at every point (x,y) over the grid. The
``ax.plot_wireframe`` command produces the picture.


.. code-block:: python

    def g(x, y):
        res=(1 + y * 2) ** (-x / y) * (1 + y * 1) ** (x / y)
        return res
    
    X = np.linspace(0.01, 1, 20)
    X, Y = np.meshgrid(X, X)
    xn, yn = X.shape
    
    f = np.zeros((xn,xn),float)   # Define matrix size nxn with zero
    entries
    for i in range(xn):
        for j in range(yn):
            f[i,j] = g(X[i,j], Y[i,j])
    





.. code-block:: python

    fig = plt.figure(figsize=(14,16))
    ax = Axes3D(fig)
    ax.plot_wireframe(X, Y, f, rstride=2, cstride=2)
    plt.show()
    

.. image:: _static/Slides_Functions_Fig3DPlot_1.*
   :width: 12 cm



In class exercises
----------------------

A simple function again. We next program a function that calculates the
standard deviation of the elements of an input vector.

Homework
-------------------------------------------------------------------------------

:doc:`./Lecture_Functions/Homework/Homework_Functions`

