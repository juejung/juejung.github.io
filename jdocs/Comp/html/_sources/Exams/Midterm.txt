Midterm Exam Econ 470
===============================================================================

Instructions
-------------------------------------------------------------------------------

 - Read the instructions for each question very, very carefully.

 - Submit this exam via Github by Wednesday 11:55pm as ``midterm.py`` and
   ``myfunctions.py`` and place both script files into
   the already existing folder named ``midterm``.

 - I need to be able to quickly run these scripts on my computer.  **Make sure
   that your script runs through without any errors!! If the code breaks, you
   lose points.** Make sure that your function imports are done correctly.

 - This is an open book exam. You can use any material that you are able to
   find online.

 - You are **not** allowed to cooperate with anybody!!

Question 1 (20 points)
-------------------------------------------------------------------------------

Define vector :math:`x=[3.2, 6, 7.8, 1, 3, 2.5]`.

 - Write a loop that adds the number 5 to all values of this vector that are
   smaller than 4. Do not just add this by hand, I need to see whether you can
   write a loop. You probably want to use an ``if`` statement as well.

 - Write a loop that replaces all values between 2 and 5 with -1.

 - Calculate the squared deviations from the mean of all values and store these
   squared deviations in a new vector called :math:`sqv`.


Question 2 (20 points)
-------------------------------------------------------------------------------

Write a function that calculates the sample covariance between two variables
and save it in a **separate** script file ``myfunctions.py`` from which you
need to import your function!

Here are the values of the two variables:

.. math::
 x = [1., 5.5, 7.8, 4.2, -2.7, -5.4, 8.9]

 y = [0.1, 1.5, 0.8, -4.2, 2.7, -9.4, -1.9].

**Hint:** Define two vectors ``xv`` and ``yv`` using the values above. Then
write a function that has the two vectors as inputs. The formula for the sample
covariance is:

.. math::
 Cov(x,y) = \frac{\sum_{i=1}^{n}(x_i-\mu_x)(y_i-\mu_y)}{n-1}.

Evaluate the covariance with the two vectors given above in your main program
where you need to import the function! In order to get full points you really
need to program this function by hand. Do not call a covariance routine from
``pandas`` or ``numpy`` but implement the above formula yourself.

Also, like in the solution files of homework 5, do not define the
function in the main script, but use a separate script file for function
definitions that you can call ``myfunctions.py``. Then import your function
definition into your main script from that file. I need to see
whether you know how to import functions that are saved in separate files.

Question 3: Function plotting (25 points)
-------------------------------------------------------------------------------

Write a function for:

.. math::
 f(x) = \left\{
        \begin{array}{ll}
            log(|x|)  & \mbox{if } x < 0 \\
            -x & \mbox{if } 0 \leq x < 2 \\
            x^2/(3-x) & \mbox{if } 2 \leq x
        \end{array}
    \right.

Then use this function and plot it for :math:`-4 \leq x \leq 4`. Make sure you
really define the function and then call it subsequently!

Question 4: (25 points)
-------------------------------------------------------------------------------

Define a matrix:

.. math::
  A =  \left( \begin{array}{ccc}
    1.2 & 3.4 & 10.3 \\
    2 & 8 & 78 \\
    45 & -36 & 8 \end{array} \right).

Write a loop and using ``if`` commands replace all the numbers in the main
diagonal (top left to bottom right diagonal) with -5. You need to write a loop
to replace the numbers in the main diagonal. You need to demonstrate how to
loop over an array and how to use if - statements!  I will not give you points
if you simply type:

.. math::
 A =  \left( \begin{array}{ccc}
  -5 & 3.4 & 10.3 \\
  2 & -5& 78 \\
  45 & -36 & -5 \end{array}\right).

Next, write a loop and replace numbers in the off-diagonal with 100. Again, use a
loop and if commands in order to get full points, simply typing the new matrix:

.. math::
 A =  \left( \begin{array}{ccc}
    1.2 & 100 & 100 \\
    100 & -5 & 100 \\
    100 & 100 & 8 \end{array} \right)

will not result in any points.

Question 5 (10 points):
-------------------------------------------------------------------------------

Define a student class. A student has the following attributes: ``firstname``,
``lastname``, ``gender`` which can be male or female, ``status`` which can be
equal to `freshman`, `sophomore`, `junior`, and `senior` and ``gpa``.

Then define the following methods for the student class.

 - The ``show_myself``
   method will simply print all the attribute variables when called upon the
   object. This method has no input arguments.

 - The ``study_time``
   method will increment the ``gpa`` of the student according to the following
   formula: ``` gpa = gpa + log(study_time)```. The only input argument of this
   method is the variable ``study_time``. In addition make sure that the
   ``gpa`` variable never exceeds 4.0 even if the student studies for a very
   long time.

Now define 5 student objects and call the ``show_myself`` method on all of
them. I suggest you use a loop.

Finally, let each one of the 5 students study for ``60, 100, 40, 300, 1000``
minutes respectively. After that call the ``show_myself`` methods on all 5
again and check whether their new ``gpa`` reflects how much they studied.



