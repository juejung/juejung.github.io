Course Administration
===============================================================================

We use **Python** for a number of reasons:

* It is  open source and therefore free
* It is platform independent, that is, this software runs on Windows or
  Linux PC's as well as Apple computers
* Python has a large user base and is still growing in
  popularity. You will therefore be able to find a lot of material online in
  case you run into trouble and need expert help and/or good sources

Installing Python
-------------------------------------------------------------------------------

Next you have to download Python. If you are running Linux or Apple, some
version of Python is already installed. However, these basic Python versions
miss some of the important scientific packages that you will still have to
install. The most important ones are ``numpy``, ``scipy``, and
``matplotlib``. If you
"google" these packages you should be able to find them on the internet. They
need to be installed.

.. index:: Spyder

I also recommend that you install an IDE for Python. One that is very amenable
for scientific computation is called **Spyder**. Spyder is part of most Linux
repositories and can easily be installed from there.

The easiest way to install Python and Spyder and all
sorts of other useful packages for scientific computing is to install Python
via the Anaconda distribution from: https://store.continuum.io/cshop/anaconda/
This is a simple one click installation process which works for
Linux/Windows/Mac and it installs everything!
When prompted whether you want to install Python 2.7 or Python 3.5, go with
3.5.

..
    .. index:: Git, Github
..
    Git and Github
    -------------------------------------------------------------------------------
..
    When you work on programming projects you may want to invest some time in
    learning a  `version control system
    <http://www.google.com/search?q=version+control+system>`_ like **Git**.
..
    Creating a free Github account
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
..
    Git becomes really powerful when you use it on the cloud so that you can collaborate
    with other programmers. One of the most trendy services concerning Git is
    offered by a web service called `Github <https://github.com/>`_.
..
    For lack of a better word, you can think of Github as a the Facebook for
    programmers (someone is probably killing me for this comparison - obviously
    Github is way cooler than Facebook). Github is free to use. Please go ahead and
    make an account on Github using the following name convention, all lowercase
    letters and NO middle names.  This is very important so please follow the name
    convention carefully::
..
    econ-firstname-lastname
..
    An example would be::
..
    econ-john-doe
..
    Choose a password and opt for the free-account version!
..
    All your homeworks and your exams will be submitted to me via Github. I made a
    Github repository for our class. You will receive an invitation to it in the
    first week of class and you will then be able to download and upload your codes
    from and to this repository.
..
    Installing and using a Git client locally on your computer
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
..
    After making the account on Github you need to "prepare" your computer for
    using the version control system. It is easiest to download a client software
    for Git which comes with the entire Git system as well as a graphical user
    interface.  I recommend **SmartGit**. It is free, easy to use,  platform independent and will
    install the client and the underlying Git architecture.
..
    You can download the client here: `SmartGit <http://www.syntevo.com/smartgit/>`_.
    So please go ahead and download and install it.
..
    After you have the client installed you can start using Git locally on
    your computer. Please read about some of the basic functionality of Git `here
    <http://git-scm.com/doc>`_ and also familiarize yourself with SmartGit
    following the `intro tour <http://www.syntevo.com/smartgit/tour/>`_.
..
    If all this is confusing, here are some more introductions to Git and Github:
..
  * `Understanding Github <http://readwrite.com/2013/09/30/understanding-github-a-journey-for-beginners-part-1>`_

Submitting homework, the midterm and the final via Dropbox
-------------------------------------------------------------------------------

A homework will be due every week. You need to submit the homework and all
other assignments via **Dropbox**. There is a little bit of setup involved but it is
not very complicated. Here are the steps:

1. Go to `Dropbox <https://www.dropbox.com>`_ and sign up for a free account

2. Download the `Dropbox-client <https://www.dropbox.com/install>`_ to your
   computer and install it. This may take a couple minutes. You should now see
   a new Dropbox folder with a green marking on it in your folder structure.
   Usually under **user** but it depends on whether you are under windows, mac
   or linux.

3. Accept the **share-a-folder** invitation that I sent out via Dropbox. I
   will email this invitation after our first class session.

4. You will find a folder structure in this shared folder that should be self
   explanatory, i.e., a homework folder for homework, a midterm folder for the
   midterm, etc. All the homework script files with extensions ``.py`` are
   already inside of this folder.

5. When you work on a homework, simply: 

   a. Open **Spyder**
   b. From within **Spyder** navigate to this shared folder and open
      the homework script file that you want to work on. For the first homework
      you would open ``homework1.py`` from within **Spyder** and start editing it. 
   c. Once you hit save, the file will automatically be mirrored via Dropbox and
      I will see the updated ``homework1.py`` file on my computer.
   d. No further action is required - the homework is already submitted.

6. PS: Please do not change the names of the **script-files**.

7. A day or two later you will find a file called: ``homework1_graded.py`` with
   my comments and the point score for this assignment inside of this folder.

..
    Then execute the following steps:
..
    1. You first need to "clone" this GitHub repository into the folder you just
     created. Log into GitHub, click on the Towson symbol under organizations
     and click on your private repository that has your name. On the right hand
     side, towards the bottom there's a field ``HTTPS clone URL`` containing
     the URL of your repository. Just copy this address with ``ctrl-c`` or
     click the copy button right next to it.
..
  2. Open your **SmartGit** client and under ``Repository`` in the menu bar on
     top click ``clone``. This will open a window that will ask for the ``Remote
     Git or SVN repository``. Into this field you copy the URL address from step 1.
..
  3. Hit ``next``. It will ask for a master password - just enter your Git
     password here.
..
  4. It now asks for a local folder where you want your repository to be saved.
     Here you simply choose the ``myCompEconRepository`` folder that you created
     above. Then click ``finish``.
..
    **You only do this part once!** We actually do this in class together.
    You now have your private GitHub repository cloned/copied into a local folder
    called ``myCompEconRepository`` on your computer. You can open this folder with your file
    browser and start working with it. You can add Python script files, changes
    files that are already in there, etc.

..
    Submitting homework via SmartGit
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
..
    Whenever you work on a homework assignment follow these simple steps.
..
 1. Open **SmartGit** and within Smartgit open your repository - the one that
    you have just cloned above. Usually it will already be open and you'll see
    it in the left sidebar.
..
 2. Hit the ``Pull`` button. This will pull down all the changes and new files
    from your GitHub account and syncronize your local folders with the cloud.
..
 3. Use **Spyder** or any text editor to work on your codes i.e., start
    editing your scriptfiles.  They are usually called ``homework1.py``,
    ``homework2.py``, etc.
..
 4. When you are done coding in Spyder go back to **SmartGit**. You will see
    all the changed files in red now. This just indicates that you have made
    changes to these files. Hit the ``Commit`` button and under the options that
    appear choose ``commit and push``. It may ask for your Github username and
    password again.
..
    You have now uploaded all your local changes back to your online Github account.
    You can actually check with your browser by going to your Github account. You
    will see your new and changed files are now updated. Click on
    the homework.py files and you'll see that your changes are all there.
..
    So it's really just these 4 easy steps from now on, i.e., two buttons. Before
    you start working ``Pull`` when you are done working ``Commit``.
..
    Submitting homework via command line
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
..
    This is for advanced users - you can ignore this if you are content using
    **SmartGit** as described above. If you want to interact with **Git** via
    command line, here are the instructions.
..
 1. Inside your repository folder open a terminal
    window. In windows you can open a terminal window by right clicking on the
    mouse while holding the shift key. In the context menu choose ``open console
    window here``.
..
    You can clone the repository with ::
..
        git clone https://github.com/Towson-Econ470-CompEcon/firstname-lastname.git
..
 2. Next  update your entire repository from GitHub locally into your folder by
    typing::
..
        git pull
..
    You should now have a homework, midterm and final folder inside of the folder
    you created above. Have a look.
..
 3. Inside of the homework folder you will find a file called ``homework1.py``.
 Open it up with **Spyder** and start coding according to the homework 1
 instructions shown in the course slides.
..
 4. After you are done programming please check that the code runs through without
 any errors. Then you need to "upload" the repository back on to GitHub - this
 part is called **pushing** the codes back up on the cloud.
..
 5. You first type::
..
        git status
..
 This will show you the changed files.
..
 6. Next you need to "stage" your changes::
..
        git add -u
..
  This will stage all the changes you have made.
..
 7. Next you need to commit your changes::
..
        git commit -m "your personal commit message"
..
 8. Finally you upload all your changes to GitHub ::
..
        git push
..
  This step will ask for your GitHub username and password.
..
    Here is a quick summary again for homework 2::
..
    git pull
    # make your changes to homework2.py and save them
    git add -u
    git merge -m "my personal message for hw 2"
    git push
..
    So it's not that difficult after all.
