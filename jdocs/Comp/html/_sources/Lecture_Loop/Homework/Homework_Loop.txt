Homework: Branching and Looping
===============================

Submit this homework via GitHub by Wednesday, February 11 at 11:55 pm.
 * Python-scripts are submitted in one file called: ``homework2.py``
 * Push your repository on Github using **SmartGit** as discussed in class.

I will base your homework grade on my grading of 2 randomly selected homework exercises.
So please make sure that you complete every homework 100% as you might otherwise end up with zero points.


Exercise 1
-------------------------------------------------------------------------------

Write a program that generates all odd numbers from :math:`1` to :math:`n`. Set n
in the beginning of the program and use a while loop to compute the numbers.
(Make sure that if :math:`n` is an even number, the largest generated odd number is
:math:`n-1`.) So if :math:`n=10` you need to generate numbers :math:`1,3,...,9`

Exercise 2
-------------------------------------------------------------------------------

You are given the following program::

    a = [1, 3, 5, 7, 11]
    b = [13, 17]
    c = a + b
    print(c)
    b[0] = -1
    d = [e+1 for e in a]
    print(d)
    d.append(b[0] + 1)
    d.append(b[-1] + 1)
    print(d[-2:])

Explain what is printed by each print statement.

Exercise 3
-------------------------------------------------------------------------------

The following code is supposed to compute the sum
:math:`s = \sum_{k=1}^{M}\frac{1}{k}`::

    s = 0; k = 1; M = 100
    while k < M:
        s += 1/k
    print s

This program does not work correctly. What are the errors? (If you try to
run the program, nothing will happen on the screen. Type Ctrl-C, i.e., hold
down the Control ``Ctrl`` key and then type the ``c`` key, to stop a program.
Fix the program so it runs through and calculates the sum correctly.
There are two basic ways to find errors in a program:

  1. read the program carefully and think about the consequences of each statement, and
  2. print out intermediate results and compare with calculations you did by
     hand.

First, try method (1) and find as many errors as you can. Then, try method (2)
for :math:`M = 3` and compare the evolution of :math:`s` with your
calculations by hand.

Exercise 4
-------------------------------------------------------------------------------

Rewrite the corrected version of the program in Exercise 3 using a ``for`` loop
over :math:`k` values instead of a ``while`` loop.

Exercise 5
-------------------------------------------------------------------------------

We define the following nested list:
``q = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]``

Index this list to extract:
 1. the letter a;
 2. the list ['d', 'e', 'f'];
 3. the last element h;
 4. the ``d`` element.
 5. Explain why ``q[-1][-2]`` has the
    value ``g``.

Exercise 6
-------------------------------------------------------------------------------

Building a list. Start with the following list of students::

    ll = ['john', 'james', 'jim', 'jason', 'jill', 'jane', 'jinn']

Here are their student numbers::

    stud_numbers = [345, 123, 876, 234, 198, 456, 876]

Write a program with a loop that generates a new list so that you have each
student name, followed by her/his student number, i.e.::

    database = ['john', 345, 'james', 124, ... , 'jinn', 876]

Once you have generated the new ``database`` list write another loop that
prints the following output::

    ------------------------------
    Student Database
    ------------------------------
    Name:            ID number:
    ------------------------------
    john             345
    james            124
    ...
    jinn             876
    ------------------------------


