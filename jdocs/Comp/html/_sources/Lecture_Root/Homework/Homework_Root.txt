Homework: Root finding
===============================

Submit this homework via GitHub by Wednesday, April 22 at 11:55 pm.
 * Python-scripts are submitted in one file called: ``homework8.py``
 * Push your repository on Github using **SmartGit** as discussed in class.

I will base your homework grade on my grading of 2 randomly selected homework exercises.
So please make sure that you complete every homework 100% as you might otherwise end up with zero points.


Exercise 1
-------------------------------------------------------------------------------

Use the **Newton-Raphson** method from the lecture and calculate the roots of
the following functions.

Then check your answers using the **bisection** method.

  1. :math:`log(x) - exp(-x)` using :math:`x_0 = 2`
  2. :math:`x^3 - x - 3` using :math:`x_0 = 0`
  3. :math:`x^3 - 7x^2 + 14x - 8` using :math:`x_0 = 1.1, 1.2, . . . , 1.9`
  4. :math:`log(x) \times exp(-x)` using :math:`x_0 = 2`


Exercise 2
-------------------------------------------------------------------------------

How do we know :math:`\pi = 3.1415926` (to 7 decimal places)? One way of finding
:math:`\pi` is to solve :math:`sin(x) = 0`. By definition the solutions to
:math:`sin(x) = 0` are
:math:`k \times \pi` for :math:`k = 0, \pm 1, \pm 2, \dots`, so the root closest to 3
should be :math:`\pi`.

 1. Use a root-finding algorithm, such as the Newton-Raphson
    algorithm, to find the root of sin(x) near

 2. How close can you get to :math:`\pi`?
    (You may use the function :math:`sin(x)` provided by Python.)

 3. The function `sin(x)` is transcendental, which means that it cannot be
    written as a rational function of x. Instead we have to write it as an infinite sum:

    .. math::
        sin(x) = \sum_{k=0}^{\infty} {(-1)^k \frac{x^{2k+1}}{(2k + 1)!}}

    This is the infinite order Taylor expansion of sin(x) about 0. In practice,
    to calculate :math:`sin(x)` numerically we have to truncate this sum, so
    any numerical calculation of :math:`sin(x)` is an approximation. In
    particular the function ``sin(x)`` provided by Python is only an
    approximation of sin(x) (though a very good one). Put

    .. math::
        f_n(x)= \sum_{k=0}^{n}{(-1)^k \frac{x^{2k+1}}{(2k + 1)!}}

    Write a function to calculate :math:`f_n(x)`. Plot :math:`f_n(x)` over the range
    :math:`[0, 7]` for a number of values of :math:`n`, and verify that it looks
    like :math:`sin(x)` for large :math:`n`.

 4. Choose a large value of n, then find an approximation to
    :math:`\pi`  by solving :math:`f_n(x) = 0` near 3. Can you get an approximation
    that is correct up to 6 decimal places? Can you think of a better way of
    calculating :math:`\pi`?


Exercise 3
-------------------------------------------------------------------------------

The bisection method can be generalised to deal with the case ``f(xl)f(xr) >
0``,
by broadening the bracket. That is, we reduce ``xl`` and/or increase
``xr`` , and try again. A reasonable choice for broadening the bracket is
to double the width of the interval ``[xl,xr]``, that is (in pseudo-code)::

    m = (xl + xr )/2
    w = xr - xl
    xl = m - w
    xr = m + w

Incorporate bracket broadening into the function ``bisection`` given in the
lecture. Note that broadening is not guaranteed to find ``xl`` and ``xr`` such that
``f(xl)f(xr)<= 0``, so you should include a limit on the number of times it can
be tried.  Use your modified function to find a root of

.. math::
    f(x) = (x - 1)^3 - 2x^2 + 10 - sin(x),

starting with ``xl = 1`` and ``xr = 2``.
