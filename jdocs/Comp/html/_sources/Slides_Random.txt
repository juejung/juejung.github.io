Random numbers
================

Uniformly distributed random numbers
----------------------------------------


.. code-block:: python

    import numpy as np
    import matplotlib.pyplot as plt
    import math
    from scipy import stats as st
    import time            # Imports system time module to time your
    script
    
    plt.close('all')  # close all open figures
    tic = time.time()
    




.. code-block:: python

    # To always get the same random numbers on each run
    # (makes results reproducible)
    np.random.seed(123456789)
    N = 30  # number of classes (i.e. bins or bars) in histogram
    
    # Uniform distributed random numbers
    u = np.random.uniform(0,1,(10000,))
    




.. code-block:: python

    fig, ax = plt.subplots()
    prob, bins, patches = ax.hist(u, bins=N, align='mid' )
    ax.set_ylabel('Number of obs')
    ax.set_title('Histogram of uniform random variable')
    plt.show()
    

.. image:: _static/Slides_Random_Uniform_1.*
   :width: 12 cm



Normally distributed random numbers
---------------------------------------


.. code-block:: python

    def phi(x):
        s = np.exp(-x**2/2)/np.sqrt(2*np.pi)  # density function of
    standard normal
        return s
    
    # Draws 10,000 standard normally distributed random numbers
    z = np.random.normal(0,1,(10000,))
    



Then plot it.


.. code-block:: python

    fig, ax = plt.subplots()
    prob, bins, patches = ax.hist(z, bins=N, align='mid' )
    ax.set_ylabel('Number of obs')
    ax.set_title('Histogram of normal random variable')
    # Plot the N(0,1) density function into the histogram
    x = np.arange(-5,5,0.1)
    ax.plot(x, phi(x))
    #ax.legend(['Histogram','Normal Density'], loc='best')
    #
    plt.show()
    

.. image:: _static/Slides_Random_Normal_Random_1.*
   :width: 12 cm



Two normally distributed random variables
++++++++++++++++++++++++++++++++++++++++++++++++


.. code-block:: python

    z1 = np.random.normal(0,1,(10000,))
    z2 = np.random.normal(0,2,(10000,))
    



Now plot it.


.. code-block:: python

    fig, ax = plt.subplots(2,1)
    #
    prob, bins, patches = ax[0].hist(z1, bins=N, align='mid' )
    ax[0].set_ylabel('Number of obs')
    ax[0].set_title('Histogram of N(0,1) random variable')
    ax[0].set_xlim([-10, 10])
    #
    prob, bins, patches = ax[1].hist(z2, bins=N, align='mid' )
    ax[1].set_ylabel('Number of obs')
    ax[1].set_title('Histogram of N(0,2) random variable')
    ax[1].set_xlim([-10, 10])
    #
    plt.show()
    

.. image:: _static/Slides_Random_Normal_2_1.*
   :width: 12 cm



T-distributed random variable
---------------------------------


.. code-block:: python

    def student_tvariate(df): # df is the number of degrees of freedom
        if df < 2 or int(df) != df:
            raise ValueError('student_tvariate: df must be a integer > 1')
        x = np.random.normal(0, 1)
        y = np.random.gamma(df/2.0, 2)
        return x / (np.sqrt(y/df))
    
    t = np.zeros((10000),float)
    for i in range(10000):
        t[i] = student_tvariate(20)
    



And the plotting routine is:


.. code-block:: python

    fig, ax = plt.subplots()
    #
    prob, bins, patches = ax.hist(t, bins=N, align='mid' )
    ax.set_ylabel('Number of obs')
    ax.set_title('Histogram of T(dof=20) random variable')
    #
    plt.show()
    

.. image:: _static/Slides_Random_T_dist_1.*
   :width: 12 cm



Drawing random integer values
---------------------------------

If you want to draw integer numbers at random you can use the
``np.random.randint()`` method. If we would like to draw random integer numbers
between {1,2,3,4} we need to specify:


.. code-block:: python

    integerList = np.random.randint(1, 5, 10)
    print(integerList)
    

::

    [1 4 1 3 1 2 4 1 1 2]
    
    



Similarly, if you would like to draw five random integer numbers between 7 and
10 you would specify:


.. code-block:: python

    integerList = np.random.randint(7, 11, 5)
    print(integerList)
    

::

    [ 8  8 10  8  9]
    
    


