First steps in Python
===============================================================================

.. index:: Calculations

Simple calculations
-------------------------------------------------------------------------------

.. index:: Spyder, PythonIDE

After installation, open **Spyder** and try some of the following in the
command line:


.. code:: python

    >>> x = 2.4
    >>> y = 3.0
    >>> x + y
    5.4
    >>> print("x= ", x)
    x=  2.4
    >>> print("y= ", y)
    y=  3.0
    >>> print("x + y = ", x + y)
    x + y =  5.4
    
    



Then try the following:

+----------------+---------------+
| Operation      | Expression    |
+================+===============+
| Subtraction:   | ``x - y``     |
+----------------+---------------+
| Division:      | ``x / y``     |
+----------------+---------------+
| Multiplication:| ``x * y``     |
+----------------+---------------+
| Power:         | ``x ** y``    |
+----------------+---------------+
| Square root:   | ``m.sqrt(x)`` |
+----------------+---------------+

Note that the power function is not ``^`` but ``**``. Also in Python we need to
import the Math module in order to use certain math functions like ``sqrt()``
etc.  When importing a module, we actually import a library of functions that
all start with the module name. By typing ``import math`` at the beginning of
your script you can then call all the functions of the **math module** (or
library) by typing ``math.functionName()``. So if you want to take the square
root of number 9, you would then simply call ``math.sqrt(9)``. You can also
abbreviate the name of the module by typing ``import math as m`` in which case
you can now take the square root with ``m.sqrt(9)`` as in the following script.


.. code:: python

    import math as m
    x = 2.455555
    y = 3.12344
    
    print(" --- OUTPUT: --- ")
    print(x + y)
    print(x * y)
    print(x / y)
    print(x ** y)
    print(m.sqrt(x))
    

.. code::

     --- OUTPUT: ---
    5.578995
    7.6697787092
    0.7861700560920011
    16.542802038492464
    1.5670210592075653
    
    



If you want to see a list of all the functions in the math module you can type:
``dir(math)`` or ``dir(m)`` and you will get a list of all methods/functions
embedded in the module.

.. index:: output, print function

The print function
-------------------------------------------------------------------------------

If you want to format your print output and combine text with numbers
you need to use the ``.format`` method of the print function. You will learn
more about objects and methods in a later chapter. Just hang in there fore now.

If you want to format the numbers (e.g., round etc.) that ``print`` will output
you need to type the double brackets ``{}`` in your text string as a
placeholder for where the number will be inserted.


.. code:: python

    import math as m
    x = 2.455555
    y = 3.12344
    
    print(" --- OUTPUT: --- ")
    # Unformatted
    print("x+y", x+y)
    # Still unformatted but using the .format() method
    print("x + y  = {}".format(x+y))
    
    # Formatted, finally ...
    print("x + y  = {:5.2f}".format(x+y))
    print("x * y  = {:5.2f}".format(x*y))
    print("x / y  = {:5.2f}".format(x/y))
    print("x ** y = {:5.2f}".format(x**y))
    print("sqrt(x)= {:5.2f}".format(m.sqrt(x)))
    

.. code::

     --- OUTPUT: ---
    x+y 5.578995
    x + y  = 5.578995
    x + y  =  5.58
    x * y  =  7.67
    x / y  =  0.79
    x ** y = 16.54
    sqrt(x)=  1.57
    
    



You can write more complex output with more than one number embedded in a text
as follows:


.. code:: python

    print(" --- OUTPUT: --- ")
    print("""We want to use variable x = {0:4.2f} \n and divide by
    variable y = {1:4.2f},\n so that we end up with expression
    x/y = {2:4.2f}""".format(x, y, x/y))
    

.. code::

     --- OUTPUT: ---
    We want to use variable x = 2.46
     and divide by
    variable y = 3.12,
     so that we end up with expression
    x/y = 0.79
    
    




.. index:: Scripts, Script files

Script files
-------------------------------------------------------------------------------

Before we go on, let's save all our commands in a so called Script file. These
are basically text files that contain all commands in one big "laundry list"
that we can then execute all at once.  In order to open such a script file in
**Spyder** simply click on ``File`` :math:`\rightarrow` ``New``. Copy/paste the
above commands into this script file and save it under a name of your choosing.
Note that the file has the extension ``.py`` which indicates that it is a
Python script file.  You can then edit this file at will and add commands etc.

If you want to run or execute the script file simply click the ``Source``
button on top of your editor window. You can also execute the script file line
by line. Simply mark the line, right click, and choose to execute
selection or click on the ``Run`` icon on top of your
editor window.  This is the green button with the "running man
symbol" on top of your editor window. If you'd like to execute just one line,
mark the line and click on the "running man symbol" to the right of the first
green button.

For the remainder of the class I highly recommend that you always use script
files. This will help you to quickly run your code and evaluate your results.

.. index:: iPython, iPython Notebook

iPython Notebook
-------------------------------------------------------------------------------

A different way to write your codes is via th `iPython Notebook
<http://ipython.org/notebook.html>`_. Read the instructions carefully, it
should be pretty self explanatory. All you need to do is you open a terminal
window.

 * Windows: Go to the start button and type `cmd` in the search box. This will
   open a black terminal window.

 * Mac: Open a terminal by clicking on the terminal symbol in the dashboard at
   the bottom.

In this window, after the dollar prompt, you simply type ipython-notebook. This
will start your browser and get you to the iPython-Notebook dashboard. You can
start a new notebook from there and start typing code into the input boxes. You
can immediately evaluate python code pressing: ``shift-enter``. There are many
`tutorials <http://www.google.com/search?q=intro+ipython+notebook>`_
about the iPython Notebook on the internet.

.. index:: Vectors, matrices

Lists, tuples and dictionaries
-------------------------------------------------------------------------------

Lists
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

A list is a simple container object that can hold an arbitrary number of Python
objects. A list can be a list of numbers, words, or a combination. Here is an
example:


.. code:: python

    alist = [1, "me", 3.456, "you", 50]
    print("The list is alist = {}".format(alist))
    

.. code::

    The list is alist = [1, 'me', 3.456, 'you', 50]
    
    



Alternatively we could translate the list into a string and then print it. You
can tag together strings with the plus sign.
which combines a string ``"The list is alist = "`` together with another string
``str(alist)``. The Python funciton **str()** translates a number into a string,
i.e., a word and then prints the combined "word".

.. code:: python

    print("The list is alist = " + str(alist))
    

.. code::

    The list is alist = [1, 'me', 3.456, 'you', 50]
    
    


We can access the elements of a list bit by bit using list indexation. Note
that the first element in the list is at position 0.

.. code:: python

    print(alist[0])
    print(alist[1])
    print(alist[2])
    print(alist[3])
    print(alist[4])
    

.. code::

    1
    me
    3.456
    you
    50
    
    


Or prettier

.. code:: python

    print("alist[0] = {}".format(alist[0]))
    print("alist[1] = {}".format(alist[1]))
    print("alist[2] = {}".format(alist[2]))
    print("alist[3] = {}".format(alist[3]))
    print("alist[4] = {}".format(alist[4]))
    

.. code::

    alist[0] = 1
    alist[1] = me
    alist[2] = 3.456
    alist[3] = you
    alist[4] = 50
    
    



If you want to extract more than one element of a list you can use a slice
operator. This basically involves the colon symbol ``:`` at the appropriate
position. If you want to extract the first three elements you can simply index
the list as ``alist[:3]``. If you want to get everything from element 2 onwards you
can ``alist[2:]``

.. code:: python

    print(alist)
    print("alist[0:4] = {}".format(alist[0:4]))
    print("alist[:3] = {}".format(alist[:3]))
    print("alist[2:] = {}".format(alist[2:]))
    

.. code::

    [1, 'me', 3.456, 'you', 50]
    alist[0:4] = [1, 'me', 3.456, 'you']
    alist[:3] = [1, 'me', 3.456]
    alist[2:] = [3.456, 'you', 50]
    
    



If you want to grab the last element of the list you can start indexing with
negative numbers.

.. code:: python

    print(alist)
    print("alist[-1] = {}".format(alist[-1]))
    print("alist[-2] = {}".format(alist[-2]))
    print("alist[-3] = {}".format(alist[-3]))
    

.. code::

    [1, 'me', 3.456, 'you', 50]
    alist[-1] = 50
    alist[-2] = you
    alist[-3] = 3.456
    
    



You can change elements of a list by reassigning them using their index. So if
you want to replace the third element of the list with the word "Mom" you
simply assign it as


.. code:: python

    alist[2] = "Mom"
    print(alist)
    

.. code::

    [1, 'me', 'Mom', 'you', 50]
    
    



Tuples
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Are immutable lists, that once defined, cannot be changed anymore.
It is a read-only list.

.. code:: python

    a_tuple = (1, "me", 3.456, "you", 50)
    print(a_tuple)
    

.. code::

    (1, 'me', 3.456, 'you', 50)
    
    


Now try to change an element of the tuple and see what happens.

.. code:: python

    a_tuple[2] = "Mom"
    print(a_tuple)
    

.. code::

    <class 'TypeError'>
    'tuple' object does not support item assignment
    



Slice operators work exactly the same way as they work on lists.

Dictionaries
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Dictionaries or short "dicts" are more general mappings and word list
associative arrays or so called hashes. They are basically key-value pairs
where a key can be almost any Python type. So instead of indexing a list with
indexes (which are numbers starting from 0, 1, etc.) the indices of a dictionary
can be words or other data types.

Here is a brief example where we use names of people as keys and store various
information together with those keys. We can then retrieve the information of
each person with the persons name.

.. code:: python

    # Defining a dictionary as adict = {'name': income}
    adict = {'James': 20000}
    adict['Jim'] = 50000
    adict['Tom'] = 80000
    


We can now retrive this info using the key.

.. code:: python

    print(adict)
    print(adict['James'])
    print(adict['Jim'])
    print(adict['Tom'])
    

.. code::

    {'Jim': 50000, 'James': 20000, 'Tom': 80000}
    20000
    50000
    80000
    
    


You can delete an element with

.. code:: python

    del adict['James']
    print(adict)
    

.. code::

    {'Jim': 50000, 'Tom': 80000}
    
    



In class exercises
-------------------------------------------------------------------------------

1. Generate a list with numbers from 1 to 10
2. Print the first 5 elements of this list
3. Replace the last entry of the list with 100 and print the list again
4. Sort the list from largest to smallest element

