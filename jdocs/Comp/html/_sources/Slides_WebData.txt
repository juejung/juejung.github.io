Working with data from the web
================================================================================

When you try to scrape or harvest data from the internet it is useful to know
the basics of `html <http://www.google.com/search?q=what+is+html>`_ which is
the markup language that is used to create websites. You can look at the source
code of a website in your browser. Simply right click (if on Windows) and click
on view frame source. When we download information from the web, we usually
download this source code and then run
a `parser <http://www.google.com/search?q=what+is+a_parser>`_
over the html source code to extract information.

The Python library ``BeautifulSoup`` helps us parsing out the information from
the html-data that we get after downloading the web page. The additional
library ``request`` allows us to download source codes from websites. We
therefore first need to import these two libraries.


.. code-block:: python

    from urllib.request import urlopen
    from bs4 import BeautifulSoup
    import pandas as pd
    import re
    



The first package allows us to open web pages and the second, ``BeautifulSoup``
parses the html code and stores it in an easily accessible database format, or
object. This object has methods that are tailor made to extract information
from the html code of the website that we scrape from.
The other two packages are Pandas and
`Regular Expressions <http://www.google.com/search?q=what+are+regular+expressions>`_.
The latter is useful for pattern matching as you will see below.

In this exercise we will download all video links from the
`YouTube <https://www.youtube.com/>`_ starting page. We will extract the title
for each video, its number of views, likes and dislikes. We then store
everything in a Pandas dataframe for further statistical analysis.

We first define the YouTube URL and assign it to a variable.

.. code-block:: python

    # Define url to Youtube
    jurl = 'https://www.youtube.com/'
    



We next open the Youtube site and read the page's html code and assign it to
the variable html.


.. code-block:: python

    html = urlopen(jurl).read()
    



We then assign the html code to the BeautifulSoup data format which allows us
to sort through the html code more systematically.

.. code-block:: python

    soup = BeautifulSoup(html.decode('utf-8', 'ignore'))
    



We next run a loop and extract all featured video links. First check
the source code of the YouTube page and convince yourself that
the links to the videos are all part of the
`CSS class <http://www.google.com/search?q=what+is+a+CSS+class>`_::

    <div class="yt-lockup-content">

Also not that the actual links to the video all start with the html tag::

    <a href="/watch

We next define an empty list so we can store all the links to the videos and
then run a loop through the html source code and extract all links that start
with ``<a href="/watch``. We append all these links to the ``link_list`` list.

.. code-block:: python

    link_list = []
    for link in soup.select('div.yt-lockup-content a[href^=/watch]'):
        # Store all links in a list
        newLink = link.attrs.get('href')
        link_list.append(newLink)
    



Let's print the first 5 entries of the list


.. code-block:: python

    print(newLink[0:6])
    

::

    /watch
    
    



We then create an empty data frame that has the same number of rows as our
list. In addition we add empty columns so that we can store the title, view,
like and dislike information later on.


.. code-block:: python

    index = range(len(link_list))
    columns = ['Links', 'Title', 'Views', 'Likes', 'Dislikes']
    df = pd.DataFrame(index=index, columns=columns)
    



We next assign the ``link_list`` with all the video links to the dataframe.

.. code-block:: python

    df['Links'] = link_list
    df['Links'] = jurl + df['Links']
    



We then start the loop that runs through our list of video links and opens each
one separately in a webpage. We than grab the title, number of views, number of
likes and number of dislikes and store these data in the current row of our
dataframe.
We use **regular expressions** to find the numbers of views, likes and dislikes
in the text string that is generated by the ``soup.select()`` and
``soup.find_all()`` functions.


.. code-block:: python

    for i in range(len(link_list)):
        if i<5 or i>len(link_list)-5:
            print('{} out of {}'.format(i, len(link_list)))
    
        # Open first youtube video link
        html = urlopen(df['Links'][i]).read()
    
        # Assign it to Soup object
        soup = BeautifulSoup(html.decode('utf-8', 'ignore'))
    
        # Extract info and store in dataframe
        df['Title'][i] = soup.title.get_text()
        df['Views'][i] = int(re.sub('[^0-9]', '', \
          soup.select('.watch-view-count')[0].get_text().split()[0]))
    
        # Extracting number of likes
        a = str(soup.find_all('button', \
          attrs={'title': 'I like this'})).replace(",","")
        df['Likes'][i] = float(re.findall(r'\d+', a)[0])
    
        # Extracting number of dislikes
        a = str(soup.find_all('button', \
          attrs={'title': 'I dislike this'})).replace(",","")
        df['Dislikes'][i] =  float(re.findall(r'\d+', a)[0])
    

::

    0 out of 204
    1 out of 204
    2 out of 204
    3 out of 204
    4 out of 204
    200 out of 204
    201 out of 204
    202 out of 204
    203 out of 204
    
    



We finally sort the data according to number of views, starting with the most
viewed video and print the first couple of entries:


.. code-block:: python

    print(df.sort('Views', ascending = False).head())
    

::

                                                Links  \
    26   https://www.youtube.com//watch?v=nfWlot6h_JM
    186  https://www.youtube.com//watch?v=nfWlot6h_JM
    181  https://www.youtube.com//watch?v=e-ORhEE9VVg
    45   https://www.youtube.com//watch?v=p1JPKLa-Ofc
    49   https://www.youtube.com//watch?v=VBmMU_iwe6U
    
                                                     Title      Views
    Likes  \
    26               Taylor Swift - Shake It Off - YouTube  443341262
    2192969
    186              Taylor Swift - Shake It Off - YouTube  443341262
    2192975
    181               Taylor Swift - Blank Space - YouTube  298494329
    1975711
    45   Beyoncé - Drunk in Love (Explicit) ft. JAY Z -...  244913910
    969099
    49           Beyoncé - Run the World (Girls) - YouTube  243250692
    705776
    
        Dislikes
    26    269992
    186   269993
    181   121129
    45     99443
    49    128237
    
    



More tutorials
--------------------------------------------------------------------------------

Here are additional web tutorials about Python web scraping that you can check
out:

 * Scraping URLs from the Pycon 2014 Conference by
   `Miguel Grinberg <http://blog.miguelgrinberg.com/post/easy-web-scraping-with-python>`_.
 * A `youtube tutorial <https://www.youtube.com/watch?v=3xQTJi2tqgk>`_ for web scraping with Python.



Homework
-------------------------------------------------------------------------------

:doc:`./Lecture_WebData/Homework/Homework_WebData`

